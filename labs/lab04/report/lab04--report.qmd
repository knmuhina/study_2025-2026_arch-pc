---
# Author
author:
  name: Мухина Ксения Николаевна
  email: 1032253531@pfur.ru
  affilation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 115419
      city: Москва
      address: ул. Орджоникидзе, д. 3

## Title
title: "Отчёт по лабораторной работе №4"
subtitle: "Дисциплина: Архитектура компьютеров"
licence: "CC BY-NC"
---

# Цель работы

Освоить процедуры компиляции и сборки программ, написанных на ассемблере NASM.

# Выполнение лабораторной работы

Далее описываемая работа была выполнена на виртуальной машине Oracle VirtualBox с ОС Linux Ubuntu.

1. Программа Hello world!

Рассмотрим пример простой программы на языке ассемблера NASM. Традиционно первая программа выводит на экран сообщение 'Hello world!'. 

Для этого создадим каталог для работы с будущей программой и перейдём в него, создадим текстовый файл 'hello.asm' и отредактируем его при помощи gedit.

![Рис. 1. Создание каталога и файла для будущей программмы.](image/shot-01.png){#shot-01 width=70%}

Наш код будет выглядеть так.

![Рис. 2. Код hello.](image/shot-02.png){#shot-02 width=70%}

Данный код взят из указаний по выполнению лабораторной работы; комментарии к коду указаны после символа ';'. Обратим внимание, что каждая команда располагается строго на отдельной строке. Также синтаксис ассемблера чувствителен к регистру, т.е. есть разница между большими и малыми буквами.

2. Транслятор NASM

NASM превращает текст программы в объектный код. Для компиляции кода программы используем команду nasm. После этого при помощи ls убедимся в успешности компиляции.

![Рис. 3. Компиляция текста Hello world!](image/shot-03.png){#shot-03 width=70%}

Текст был записан в виде объектного кода в созданный объектный файл под названием 'hello.o'. Отметим, что ключ -f указывает транслятору, что требуется создать бинарные файлы в формате ELF. NASM всегда создаёт выходные файлы в текущем каталоге: в данном случае это наш каталог lab04.

3. Расширенный синтаксис командной строки NASM

Полный синтаксис команды nasm выглядит следующим образом:

nasm [-@ косвенный_файл_настроек] [-o объектный_файл] [-f формат_объектного_файла] [-l листинг] [параметры...] [--] исходный_файл

Выполним следующую команду и сразу же проверим её результат при помощи ls:

![Рис. 4. Компиляция текста в файл obj.o и создание листинга list.lst.](image/shot-04.png){#shot-04 width=70%}

Данная команда скомпилировала hello.asm в obj.o (-o позволила задать имя объектному файлу), при этом формат выходного файла будет elf, в который включены символы для отладки благодаря опции -g. Помимо этого был создан файл листинга list.lst при помощи опции -l.

4. Компоновщик LD

Чтобы получить исполняемую программу, объектный файл необходимо передать на обработку компоновщику (команда ld).

![Рис. 5. Создание исполняемого файла hello.](image/shot-05.png){#shot-05 width=70%}

Файл был успешно обработан, и в результате была получена программа hello.

Компоновщик не предполагает по умолчанию расширений для файлов, но принято использовать следующие:

- o: для объектных файлов;
- без расширения: для исполняемых файлов;
- map: для файлов схемы программы;
- lib: для библиотек.

Так же, как и в команде nasm, в команде ld при помощи ключа -o можно задать имя создаваемому файлу.

![Рис. 6. Создание исполняемого файла с заданным именем.](image/shot-06.png){#shot-06 width=70%}

В результате была собрана программа main из объектного файла obj.o.

4.1. Запуск исполняемого файла

Запустим созданный исполняемый файл hello.

![Рис. 7. Запуск исполняемого файла hello.](image/shot-07.png){#shot-07 width=70%}

Терминал вывел текст 'Hello world!', что показывает успешное исполнение.

# Задания для самостоятельной работы

Создадим копию файла hello.asm с именем lab4.asm и в соответствии с заданием внесём в него изменения с помощью gedit.

Теперь наш код будет выглядеть так:

![Рис. 8. Код lab4.](image/shot-08.png){#shot-08 width=70%}

Оттранслируем полученный текст в объектный файл, выполним компоновку файла и запустим получившийся исполняемый файл.

![Рис. 9. Запуск программы lab4.](image/shot-09.png){#shot-09 width=70%}

Загрузим файлы hello.asm и lab4.asm на GitHub.

![Рис. 10. Загрузка файлов на GitHub.](image/shot-10.png){#shot-10 width=70%}

# Выводы

В ходе выполнения лабораторной работы мы освоили процедуры компиляции и сборки программ, написанных на ассемблере NASM.

# Список литературы{.unnumbered}

1. Файл ["Лабораторная работа №4. Создание и процесс обработки программ на языке ассемблера NASM.pdf"](https://esystem.rudn.ru/mod/resource/view.php?id=1030552)
